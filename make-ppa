#!/usr/bin/python

# Creates source packages and uploads them to Launchpad.
#
# Put this script somewhere, then run it from a git repository containing
# sources for a debian package. Resulting packages will be created in a
# subdirectory next to the make-ppa script.

import sys
import os
import subprocess
import re
import argparse

PPA = 'ppa:yubico/stable'

CHANGELOG = 'debian/changelog'
DISTS = ['lucid', 'precise', 'quantal', 'raring']
VERSION_PATTERN = re.compile(
    r'^(?P<name>[+-.a-z0-9]+)\s+\((?P<version>[^)]+)\)\s+(?P<dist>[^)]+); urgency=(?P<urgency>.+)$')
OUTPUT_DIR = os.path.dirname(os.path.realpath(__file__))


class Package(object):
    def __init__(self, dists=DISTS):
        self.dists = dists

        file = open(CHANGELOG, 'r')
        self.changelog = file.readlines()
        file.close()
        match = VERSION_PATTERN.match(self.changelog[0])

        self.name = match.group('name')
        self.dist = match.group('dist')
        self.urgency = match.group('urgency')
        orig_version = match.group('version')

        base_target = "%s/%s/%s" % (OUTPUT_DIR, self.name, orig_version)
        if '~ppa' in orig_version or self.dist in DISTS:
            print "Version '%s %s' already looks like a ppa version!" % \
                (orig_version, self.dist)
            sys.exit(1)

        ppa_version = 1
        while os.path.exists('%s~ppa%d' % (base_target, ppa_version)):
            ppa_version += 1
        self.version = '%s~ppa%s' % (orig_version, ppa_version)
        self.target = "%s/%s/%s" % (OUTPUT_DIR, self.name, self.version)

    def build_dist(self, dist):
        version = '%s~%s1' % (self.version, dist)
        line = "%s (%s) %s; urgency=%s" % \
            (self.name, version, dist, self.urgency)
        print "Build %s" % line
        changelog = list(self.changelog)
        changelog[0] = line

        file = open(CHANGELOG, 'w')
        file.writelines(changelog)
        file.close()

        os.system('debuild -S -sa -us -uc')
        os.system('mv ../%s_%s* %s/' %
                 (self.name, version, self.target))

    def build(self):
        upstream_version = self.version.split('-', 1)[0]
        orig = '%s_%s.orig.tar.gz' % (self.name, upstream_version)
        if not os.path.exists('../%s' % orig):
            res = subprocess.check_output('pristine-tar list', shell=True)
            if not orig in res.split():
                print "../%s is missing!" % orig
                sys.exit(1)
            os.system('pristine-tar checkout %s' % orig)
            os.system('mv %s ../' % orig)

        os.system('mkdir -p %s' % self.target)
        os.system('cp ../%s %s/' % (orig, self.target))

        for dist in self.dists:
            self.build_dist(dist)

        file = open(CHANGELOG, 'w')
        file.writelines(self.changelog)
        file.close()

    def sign(self):
        os.system('debsign %s/%s_%s*_source.changes' %
                  (self.target, self.name, self.version))

    def upload(self):
        for file in os.listdir(self.target):
            if file.endswith('.changes'):
                os.system('dput %s %s/%s' % (PPA, self.target, file))


if __name__ == '__main__':
    parser = argparse.ArgumentParser('Create source packages for PPA',
                                     add_help=True)
    parser.add_argument('--no-sign', action='store_false', dest='sign',
                        help='Do not sign the packages (implies --no-upload)')
    parser.add_argument('--no-upload', action='store_false', dest='upload',
                        help='Do not upload the (signed) packages')
    parser.add_argument('--dists', nargs='+', default=DISTS, metavar='DIST',
                        help='Distributions to build for')
    parser.add_argument('--force', action='store_true', dest='force',
                        help='Do not prompt for confirmation before running')

    args = parser.parse_args()

    do_sign = args.sign
    do_upload = do_sign and args.upload

    package = Package(dists=args.dists)

    print "Building %s %s for distributions: %s" % \
        (package.name, package.version, ', '.join(package.dists))
    if do_sign:
        print "Will sign packages!"
    if do_upload:
        print "Will upload packages!"
    if not args.force:
        raw_input("Enter to continue, Ctrl+C to abort")

    package.build()

    if do_sign:
        package.sign()

    if do_upload:
        package.upload()

    print "All done!"
